#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('firstphasergame:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var MakeID = function () {
  return '_' + Math.random().toString(36).substr(2, 9);
};
// socket ï¿½ï¿½ï¿? ~
const ROOMEMPTY = 1;
const ROOMWAITING = 2;
const ROOMFULL = 4;
const ROOMPLAYING = 8;

const TILE_GROUND = 1;
const TILE_UBWALL = 2;
const TILE_BWALL = 4;

const TYPE_SPEEDUP = 16;
const TYPE_BOMBUP  = 32;
const TYPE_POWERUP = 64;


var rooms = [];
for (var i = 0; i < 5; i++) {
  rooms.push({
    player: [],
    roomstate: ROOMEMPTY,
    tiles: []
  });
}

var io = require('socket.io')(server);

var nps_lobby = io.on('connection', function (socket) {
  //loginScene~
  socket.on('getID',()=>{
    socket.emit('getID',socket.id);
  })
  //~loginScene


  // lobbyScene ~
  socket.on('rqrooms', () => {
    updateRoomsInfo();
    socket.emit('aswrooms', rooms);
  });

  socket.on('enterroom', (roomnum, userid) => {
    if (rooms[roomnum].roomstate == ROOMFULL || rooms[roomnum].roomstate == ROOMPLAYING) {
      socket.emit('aswrooms', rooms);
      socket.emit('serverMsg', 'Can not enter room!!');
    }
    else {
      updateRoomsInfo();

      if(typeof io.sockets.adapter.rooms[roomnum] == 'undefined')
      {
        io.to(socket.id).emit('ChangeRoomScene', roomnum, 1);
      }
      else
      {
        io.to(socket.id).emit('ChangeRoomScene', roomnum, io.sockets.adapter.rooms[roomnum].length+1);
      }

    }
  });

  // ~lobbyScene

  // roomScene ~

  socket.on('joinRoom', (roomnum, pnum) => {
    socket.join(roomnum);
    io.emit('broadcastInfo');
  });
  socket.on('broadcastInfo',()=>{
  });

  socket.on('ChgState',(roomnum,state,pnum)=>{
    io.to(roomnum).emit('ChgState',state,pnum);
  })

  socket.on('leaveRoom', (roomnum, pnum) => {
    io.to(roomnum).emit('refresh');
    socket.leave(roomnum);
  });

  socket.on('chatting',(roomnum,text,id)=>{
    io.to(roomnum).emit('chatting',text,id);
  });

  socket.on('gameStart',(roomnum)=>{
    rooms[roomnum].tiles = makeTile();
    io.to(roomnum).emit('gameStart');
    rooms.roomstate=ROOMPLAYING;
  });
  // ~roomScene

  // gameScene ~
  socket.on('setBomb',(roomnum,bombInfo)=>{
    io.to(roomnum).emit('setBomb',bombInfo);
  });
  socket.on('playerUpdate',(roomnum,Info)=>{
    socket.broadcast.to(roomnum).emit('playerUpdate',Info);
    //io.to(roomnum).emit('playerUpdate',frame,x,y);
  })
  socket.on('playerDie',(roomnum)=>{
    socket.broadcast.to(roomnum).emit('overText','You WIN!!');
    io.to(roomnum).emit('gameEnd');
  })
  socket.on('playSound',(roomnum,sound)=>{
    socket.broadcast.to(roomnum).emit('playSound',sound);
  })
  socket.on('makeMap',(roomnum)=>{
    io.to(roomnum).emit('makeMap',rooms[roomnum].tiles);
  })
  // ~ gameScene
  socket.on('disconnect',()=>{
    //io.emit('disconnect');
    io.emit('refresh');
  });
});

function makeTile() {
  var TILES = [
    [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
    [2, 1, 1, 1, 4, 1, 4, 4, 4, 1, 1, 1, 2],
    [2, 1, 2, 4, 2, 4, 2, 4, 2, 4, 2, 1, 2],
    [2, 1, 4, 4, 4, 4, 4, 4, 1, 4, 4, 1, 2],
    [2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2],
    [2, 4, 4, 1, 4, 4, 4, 4, 1, 4, 4, 4, 2],
    [2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 1, 2],
    [2, 4, 4, 4, 1, 4, 1, 4, 4, 1, 4, 4, 2],
    [2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2],
    [2, 1, 4, 4, 1, 4, 4, 4, 1, 4, 4, 4, 2],
    [2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2],
    [2, 1, 4, 1, 4, 4, 4, 1, 4, 4, 4, 1, 2],
    [2, 1, 2, 4, 2, 4, 2, 4, 2, 4, 2, 1, 2],
    [2, 1, 1, 1, 4, 4, 1, 4, 4, 1, 1, 1, 2],
    [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
  ];
  for (var i = 0; i < TILES.length; i++) {
    for (var j = 0; j < TILES[i].length; j++) {
      if (TILES[i][j] == 4) {
        var rndnum = parseInt(Math.random() * 10);

        if (rndnum == 1) {
          TILES[i][j] += TYPE_SPEEDUP;
        }
        else if (rndnum == 2) {
          TILES[i][j] += TYPE_BOMBUP;
        }
        else if (rndnum == 3) {
          TILES[i][j] += TYPE_POWERUP;
        }
      }
    }
  }
  return TILES;
}

function updateRoomsInfo() {

  for (var i = 0; i < 5; i++) {
    var clientNum =0;
    if (io.sockets.adapter.rooms[String(i)]) {
      clientNum = io.sockets.adapter.rooms[String(i)].length;
    }
    if (clientNum == 0) rooms[i].roomstate = ROOMEMPTY;
    else if (clientNum == 1) rooms[i].roomstate = ROOMWAITING;
    else if (clientNum == 2) rooms[i].roomstate = ROOMFULL;
  }
}


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
