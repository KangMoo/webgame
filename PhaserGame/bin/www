#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('firstphasergame:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var MakeID = function () {
  return '_' + Math.random().toString(36).substr(2, 9);
};
// socket ��� ~
const ROOMEMPTY = 1;
const ROOMWAITING = 2;
const ROOMFULL = 4;
const ROOMPLAYING = 8;


var rooms = [];
for (var i = 0; i < 5; i++) {
  rooms.push({
    playerNum:0,
    player: [],
    roomstate: ROOMEMPTY,
  });
}

var io = require('socket.io')(server);

var nps_lobby = io.on('connection', function (socket) {
  //loginScene~
  socket.on('getID',()=>{
    socket.emit('getID',socket.id);
  })
  //~loginScene


  // lobbyScene ~
  socket.on('rqrooms', () => {
    updateRoomsInfo();
    socket.emit('aswrooms', rooms);
  });

  socket.on('enterroom', (roomnum, userid) => {
    if (rooms[roomnum].roomstate == ROOMFULL || rooms[roomnum].roomstate == ROOMPLAYING) {
      socket.emit('aswrooms', rooms);
      socket.emit('serverMsg', 'Can not enter room!!');
    }
    else {
      updateRoomsInfo();
      socket.emit('ChangeRoomScene', roomnum, rooms[roomnum].player.push(userid));
    }
  });

  // ~lobbyScene

  // roomScene ~

  socket.on('joinRoom', (roomnum, pnum) => {
    socket.join(roomnum);
    io.emit('broadcastInfo');
  });
  socket.on('broadcastInfo',()=>{
  });
  
  socket.on('ChgState',(state,pnum)=>{
    io.emit('ChgState',state,pnum);
  })

  socket.on('leaveRoom', (roomnum, pnum) => {
    io.emit('refresh');
    socket.leave(roomnum);
  });

  socket.on('chatting',(text,id)=>{
    io.emit('chatting',text,id);
  });
  // ~roomScene

  socket.on('disconnect',()=>{
    //io.emit('disconnect');
    io.emit('refresh');
  });
});



function updateRoomsInfo() {

  for (var i = 0; i < 5; i++) {
    var clientNum =0;
    if (io.sockets.adapter.rooms[String(i)]) {
      clientNum = io.sockets.adapter.rooms[String(i)].length;
    }
    if (clientNum == 0) rooms[i].roomstate = ROOMEMPTY;
    else if (clientNum == 1) rooms[i].roomstate = ROOMWAITING;
    else if (clientNum == 2) rooms[i].roomstate = ROOMFULL;
  }
}


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
