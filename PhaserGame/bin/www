#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('firstphasergame:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


// socket 통신 ~
const ROOMEMPTY = 1;
const ROOMWAITING = 2;
const ROOMFULL = 4;
const ROOMPLAYING = 8;

var roomNum;

//test~
roomNum=11;
//~test

var rooms = [1,2,4,8,1];

var io = require('socket.io')(server);

var nps_lobby = io.of('/lobby').on('connection',function(socket){
  socket.on('rqrooms', () =>{
    socket.emit('aswrooms',rooms);
    //console.log('test');
  });
  socket.on('enterroom', (roomnum) =>{
    if(rooms[roomnum] == ROOMFULL || rooms[roomnum] == ROOMPLAYING)
    {
      socket.emit('aswrooms',rooms);
      socket.emit('serverMsg','Can not enter room!!');
    }
    else
    {
      socket.emit('goToRoom',roomnum);
    }
  });
});
io.on('connection',(socket)=>{
  socket.join(roomNum);
  console.log("connected");

  socket.on('C2S',(data)=>{
    socket.broadcast.to(roomNum).emit('S2C',data);
    //socket.broadcast.emit('S2C',data);
    //io.emit('S2C',data);
    //io.emit('S2C',{x:data.x,y:data.y});
  });
  socket.on('disconnect',()=>{
    socket.leave(roomNum);
    console.log('disconnected');
  })
})
// ~ socket 통신


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
